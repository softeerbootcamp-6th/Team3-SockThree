name: Build and Push

on:
  push:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}/backend

jobs:
  # 변경된 파일을 감지하는 Job
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'server/**'
              - '.github/workflows/build-and-push.yml'

  build-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true'
    permissions:
      contents: read
      packages: write
    outputs:
      image-tags: ${{ steps.backend-meta.outputs.tags }}
      primary-tag: ${{ steps.set-primary-tag.outputs.tag }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.GIT_USERNAME }}
        password: ${{ secrets.GIT_TOKEN }}

    - name: Extract metadata for backend
      id: backend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
        tags: |
          # main 브랜치: latest 태그 생성
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
          # develop 브랜치: develop-{short_sha} 태그 생성
          type=raw,value=develop-{{short_sha}},enable=${{ github.ref == 'refs/heads/develop' }}
          # main 브랜치: main-{short_sha} 태그도 생성 (버전 관리용)
          type=raw,value=main-{{short_sha}},enable=${{ github.ref == 'refs/heads/main' }}

    - name: Set primary tag for deployment
      id: set-primary-tag
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "tag=latest" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          echo "tag=develop-${SHORT_SHA}" >> $GITHUB_OUTPUT
        fi

    - name: Build and push backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./server
        push: true
        tags: ${{ steps.backend-meta.outputs.tags }}
        labels: ${{ steps.backend-meta.outputs.labels }}

    - name: Output image info
      run: |
        echo "Built and pushed image with tags:"
        echo "${{ steps.backend-meta.outputs.tags }}"
        echo "Primary tag for deployment: ${{ steps.set-primary-tag.outputs.tag }}"
