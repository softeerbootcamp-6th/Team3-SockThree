/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/videos/progress": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 내 비디오 진행 상황 목록 조회 (수강생)
     * @description 현재 학생의 모든 비디오 진행 상황을 조회합니다.
     */
    get: operations["getCurrentStudentProgress"];
    /**
     * 비디오 진행 상황 업데이트 (수강생)
     * @description 학생의 비디오 시청 진행 상황을 업데이트합니다.
     */
    put: operations["updateProgress"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/students/my-info": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 내 정보 조회 (수강생)
     * @description 현재 로그인한 학생의 정보를 조회합니다.
     */
    get: operations["getMyInfo"];
    /**
     * 내 정보 수정 (수강생)
     * @description 현재 로그인한 학생의 정보를 수정합니다.
     */
    put: operations["updateMyInfo"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/reviews/{reviewId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 리뷰 단일 조회 (강사, 수강생)
     * @description 리뷰 ID로 특정 리뷰의 상세 정보를 조회합니다.
     */
    get: operations["getReview"];
    /**
     * 리뷰 수정 (수강생)
     * @description 수강생이 본인의 리뷰를 수정합니다. STUDENT 권한 필요.
     */
    put: operations["updateReview"];
    post?: never;
    /**
     * 리뷰 삭제 (수강생)
     * @description 수강생이 본인의 리뷰를 삭제합니다. STUDENT 권한 필요.
     */
    delete: operations["deleteReview"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/qna/{qnaId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * QnA 상세 조회 (수강생, 강사)
     * @description 특정 QnA의 상세 정보를 조회합니다.
     */
    get: operations["getQuestion"];
    /**
     * 강의 질문 수정 (수강생)
     * @description 학생이 등록한 질문을 수정합니다.
     */
    put: operations["updateQuestion"];
    post?: never;
    /**
     * 강의 질문 삭제 (수강생)
     * @description 학생이 등록한 질문을 삭제합니다.
     */
    delete: operations["deleteQuestion"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/qna/{qnaId}/answer": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 강의 질문 답변 (강사)
     * @description 강사가 학생의 질문에 답변합니다.
     */
    put: operations["answerQuestion"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/lectures/{lectureId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 강의 단일 조회 (강사, 수강생)
     * @description 강의 ID로 특정 강의의 상세 정보를 조회합니다.
     */
    get: operations["getLecture"];
    /**
     * 강의 수정 (강사)
     * @description 강사가 본인의 강의 정보를 수정합니다. TEACHER 권한 필요.
     */
    put: operations["updateLecture"];
    post?: never;
    /**
     * 강의 삭제 (강사)
     * @description 강사가 본인의 강의를 삭제합니다. TEACHER 권한 필요.
     */
    delete: operations["deleteLecture"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/lectures/{lectureId}/widget-settings": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 위젯 설정 수정 (강사)
     * @description 강사가 본인의 강의 위젯 설정을 수정합니다. TEACHER 권한 필요.
     */
    put: operations["updateWidgetSettings"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/assignments/{assignmentId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 과제 단일 조회 (강사, 수강생)
     * @description 과제 ID로 특정 과제의 상세 정보를 조회합니다.
     */
    get: operations["getAssignment"];
    /**
     * 과제 수정 (강사)
     * @description 강사가 본인의 과제 정보를 수정합니다. TEACHER 권한 필요.
     */
    put: operations["updateAssignment"];
    post?: never;
    /**
     * 과제 삭제 (강사)
     * @description 강사가 본인의 과제를 삭제합니다. TEACHER 권한 필요.
     */
    delete: operations["deleteAssignment"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/assignments/submissions/{submissionId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 파일로 과제 제출 수정 (수강생)
     * @description 학생이 제출한 과제를 파일로 수정합니다.
     */
    put: operations["updateSubmission"];
    post?: never;
    /**
     * 과제 제출 삭제 (수강생)
     * @description 학생이 제출한 과제를 삭제합니다.
     */
    delete: operations["deleteSubmission"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/assignments/submissions/{submissionId}/feedback": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 과제 제출 피드백 업데이트 (강사)
     * @description 강사가 학생의 과제 제출에 대한 피드백을 작성하거나 수정합니다. TEACHER 권한 필요.
     */
    put: operations["updateFeedback"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/reviews": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 리뷰 작성 (수강생)
     * @description 수강생이 강의에 대한 리뷰를 작성합니다. STUDENT 권한 필요.
     */
    post: operations["createReview"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/qna": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 강의 질문 등록 (수강생)
     * @description 학생이 강의에 대한 질문을 등록합니다.
     */
    post: operations["createQuestion"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/lectures": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 강의 생성 (강사)
     * @description 강사가 새로운 강의를 생성합니다. TEACHER 권한 필요.
     */
    post: operations["createLecture"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/lectures/{lectureId}/chapters/{chapterId}/video": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 동영상 업로드 요청 (강사)
     * @description 강사가 동영상 업로드를 위한 Video 엔티티를 생성하고 S3 Upload Presigned URL을 받습니다. TEACHER 권한 필요.
     */
    post: operations["uploadVideo"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/lectures/{lectureId}/chapters/{chapterId}/video/{videoId}/finalize": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 동영상 분할 완료 알림 (Lambda)
     * @description Lambda에서 동영상 분할 완료 후 호출하여 Video 엔티티의 streamable 상태를 true로 변경합니다.
     */
    post: operations["finalizeVideoUpload"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/interests": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 내 관심 카테고리 목록 조회 (수강생)
     * @description 현재 로그인한 학생의 관심 카테고리 목록을 조회합니다.
     */
    get: operations["getMyInterestingCategories"];
    put?: never;
    /**
     * 관심 카테고리 추가 (수강생)
     * @description 새로운 관심 카테고리를 추가합니다.
     */
    post: operations["addInterestingCategory"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/enrollments": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 내 수강 강의 목록 조회 (수강생)
     * @description 현재 로그인한 학생의 수강 중인 강의 목록을 조회합니다.
     */
    get: operations["getMyEnrollments"];
    put?: never;
    /**
     * 강의 수강 등록 (수강생)
     * @description 새로운 강의에 수강 등록합니다.
     */
    post: operations["enrollLecture"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/chapters": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 챕터 생성 (강사)
     * @description 강사가 새로운 챕터를 생성합니다. TEACHER 권한 필요.
     */
    post: operations["createChapter"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bookmarks": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 내 북마크한 강의 목록 조회 (수강생)
     * @description 현재 로그인한 학생의 북마크한 강의 목록을 조회합니다.
     */
    get: operations["getMyBookmarks"];
    put?: never;
    /**
     * 강의 북마크 추가 (수강생)
     * @description 강의를 북마크에 추가합니다.
     */
    post: operations["addBookmark"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/register/teacher": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 회원가입 (강사) */
    post: operations["registerTeacher"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/register/student": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 회원가입 (수강생) */
    post: operations["registerStudent"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/refresh": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 토큰 재발급 (공통) */
    post: operations["refreshToken"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/logout": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 로그아웃 (공통) */
    post: operations["logout"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 로그인 (공통) */
    post: operations["login"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/assignments": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 과제 생성 (강사)
     * @description 강사가 새로운 과제를 생성합니다. TEACHER 권한 필요.
     */
    post: operations["createAssignment"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/assignments/submissions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * [Page] 내 과제 제출 목록 조회 (수강생)
     * @description 현재 학생의 과제 제출 목록을 조회합니다.
     */
    get: operations["getCurrentStudentSubmissions"];
    put?: never;
    /**
     * 파일로 과제 제출 (수강생)
     * @description 학생이 파일을 업로드하여 과제를 제출합니다.
     */
    post: operations["createSubmission"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/chapters/{chapterId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 챕터 단일 조회 (강사, 수강생)
     * @description 챕터 ID로 특정 챕터의 정보를 조회합니다.
     */
    get: operations["getChapter"];
    put?: never;
    post?: never;
    /**
     * 챕터 삭제 (강사)
     * @description 강사가 챕터를 삭제합니다. TEACHER 권한 필요.
     */
    delete: operations["deleteChapter"];
    options?: never;
    head?: never;
    /**
     * 챕터 수정 (강사)
     * @description 강사가 챕터 정보를 수정합니다. TEACHER 권한 필요.
     */
    patch: operations["updateChapter"];
    trace?: never;
  };
  "/videos/{videoId}/progress": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 특정 비디오의 모든 진행 상황 조회 (강사)
     * @description 특정 비디오의 모든 학생 진행 상황을 조회합니다. (강사용)
     */
    get: operations["getProgressByVideoForAll"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/videos/{videoId}/progress/my": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 특정 비디오 진행 상황 조회 (수강생)
     * @description 특정 비디오의 현재 학생 진행 상황을 조회합니다.
     */
    get: operations["getProgressByVideo"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/videos/progress/lectures/{lectureId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 강의별 내 비디오 진행 상황 조회 (수강생)
     * @description 특정 강의의 비디오 진행 상황을 조회합니다.
     */
    get: operations["getCurrentStudentProgressByLecture"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/reviews/lectures/{lectureId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * [Page] 강의별 리뷰 목록 조회 (강사, 수강생)
     * @description 특정 강의의 모든 리뷰를 페이징하여 조회합니다.
     */
    get: operations["getReviewsByLecture"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/reviews/lectures/{lectureId}/my": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 내 리뷰 조회 (수강생)
     * @description 현재 학생의 특정 강의에 대한 리뷰를 조회합니다.
     */
    get: operations["getMyReviewByLecture"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/qna/my": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 내 질문 목록 조회 (수강생)
     * @description 현재 학생의 질문 목록을 조회합니다.
     */
    get: operations["getCurrentStudentQuestions"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/qna/my/count": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 내 질문 수 조회 (수강생)
     * @description 현재 학생의 총 질문 수를 조회합니다.
     */
    get: operations["getCurrentStudentQuestionCount"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/qna/lectures/{lectureId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 강의별 QnA 목록 조회 (수강생, 강사)
     * @description 특정 강의의 QnA 목록을 조회합니다.
     */
    get: operations["getQuestionsByLecture"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/lectures/{lectureId}/widgets/statistics": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 강좌 수강생 통계 조회 (강사, 수강생)
     * @description 강좌에 속한 수강생들의 상세 통계를 조회합니다.
     *
     *     포함되는 통계:
     *     1. 평균 시청 비디오 수
     *     2. 모든 비디오를 완주한 학생 수
     *     3. 전체 수강생에 대한 최근 5개의 과제 제출률
     *     4. 50대 이상 5살마다 남녀로 나뉜 수강 연령대 통계
     *
     */
    get: operations["getLectureStatistics"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/lectures/{lectureId}/widgets/review": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 리뷰 위젯 데이터 조회 (수강생, 강사)
     * @description 특정 강의의 리뷰 위젯에 필요한 데이터를 조회합니다.
     *
     *     포함되는 정보:
     *     1. 해당 강의의 평점이 가장 높은 리뷰 3개
     *     2. 해당 강의의 전체 수강생 대비 수강후기 작성 비율
     *
     */
    get: operations["getReviewWidget"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/lectures/{lectureId}/widgets/qna": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * QNA 위젯 데이터 조회 (수강생, 강사)
     * @description 특정 강의의 QNA 위젯에 필요한 데이터를 조회합니다.
     *
     *     포함되는 정보:
     *     1. 해당 강의의 최근 질문 7개
     *     2. 해당 강의에서 내가 한 질문 최대 7개
     *
     */
    get: operations["getQnaWidget"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/lectures/{lectureId}/widgets/assignment": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 과제 위젯 데이터 조회 (수강생)
     * @description 특정 강의의 과제 위젯에 필요한 데이터를 조회합니다.
     *
     *     포함되는 정보:
     *     1. 해당 강의의 마감 기한이 가장 빠른 과제 정보
     *     2. 해당 강의에서 가장 최근에 제출한 과제의 제출 현황 (강사의 피드백 포함)
     *
     */
    get: operations["getAssignmentWidget"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/lectures/{lectureId}/side-widget/my-lecture-status": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 강좌 상세 화면의 나의 강의 현황 사이드바 위젯 (학생)
     * @description 수강중인 강좌의 나의 강의 현황 데이터를 받습니다.
     */
    get: operations["getMyLectureStatusWidget"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/lectures/{lectureId}/side-widget/lecture-info": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 강좌 상세 화면의 강좌 정보 사이드바 위젯 (학생)
     * @description 강좌의 강좌 정보 위젯 데이터를 받습니다.
     */
    get: operations["getLectureInfoWidget"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/lectures/{lectureId}/banner": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 강좌의 배너
     * @description 강좌의 대략적인 정보를 포함하여 이미지 링크를 포함하는 배너 정보를 받습니다.
     */
    get: operations["getLectureBanner"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/enrollments/lecture/{lectureId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 특정 강의의 수강생 목록 조회 (강사)
     * @description 특정 강의의 수강생 목록을 조회합니다.
     */
    get: operations["getLectureEnrollments"];
    put?: never;
    post?: never;
    /**
     * 강의로 수강 취소 (수강생)
     * @description 강의 ID로 수강을 취소합니다.
     */
    delete: operations["cancelEnrollmentByLecture"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/enrollments/count": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 내 수강 강의 수 조회 (수강생)
     * @description 현재 수강 중인 강의 수를 조회합니다.
     */
    get: operations["getMyEnrollmentCount"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/enrollments/check/{lectureId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 강의 수강 여부 확인 (수강생)
     * @description 특정 강의에 수강 등록되어 있는지 확인합니다.
     */
    get: operations["checkEnrollment"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bookmarks/check/{lectureId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 강의 북마크 여부 확인 (수강생)
     * @description 특정 강의가 북마크되어 있는지 확인합니다.
     */
    get: operations["checkBookmark"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/validate": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 토큰 유효성 검사 (공통) */
    get: operations["validateToken"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/assignments/{assignmentId}/submissions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * [Page] 특정 과제의 모든 제출 조회 (강사)
     * @description 특정 과제의 모든 제출을 조회합니다. (강사용)
     */
    get: operations["getSubmissionsByAssignment"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/assignments/{assignmentId}/submissions/my": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * [Page] 특정 과제 제출 조회 (수강생)
     * @description 특정 과제에 대한 현재 학생의 제출을 조회합니다.
     */
    get: operations["getMySubmissionByAssignment"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/assignments/{assignmentId}/submissions/check": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 과제 제출 여부 확인 (수강생)
     * @description 특정 과제에 대한 제출 여부를 확인합니다.
     */
    get: operations["checkSubmissionStatus"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/assignments/submissions/count": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 내 과제 제출 수 조회 (수강생)
     * @description 현재 학생의 총 과제 제출 수를 조회합니다.
     */
    get: operations["getCurrentStudentSubmissionCount"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/videos/progress/{progressId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 비디오 진행 상황 삭제 (수강생)
     * @description 학생의 비디오 진행 상황을 삭제합니다.
     */
    delete: operations["deleteProgress"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/interests/{interestingCategoryId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 관심 카테고리 삭제 (수강생)
     * @description 관심 카테고리를 삭제합니다.
     */
    delete: operations["removeInterestingCategory"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/interests/subcategory/{subCategoryId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 서브 카테고리로 관심 카테고리 삭제 (수강생)
     * @description 서브 카테고리 ID로 관심 카테고리를 삭제합니다.
     */
    delete: operations["removeInterestingCategoryBySubCategory"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/enrollments/{enrollmentId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 수강 취소 (수강생)
     * @description 수강을 취소합니다.
     */
    delete: operations["cancelEnrollment"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bookmarks/{bookmarkId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 강의 북마크 삭제 (수강생)
     * @description 북마크를 삭제합니다.
     */
    delete: operations["removeBookmark"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bookmarks/lecture/{lectureId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 강의로 북마크 삭제 (수강생)
     * @description 강의 ID로 북마크를 삭제합니다.
     */
    delete: operations["removeBookmarkByLecture"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** @description 비디오 진행 상황 업데이트 요청 */
    VideoProgressRequest: {
      /**
       * Format: int64
       * @description 비디오 ID
       * @example 1
       */
      videoId: number;
      /**
       * Format: int64
       * @description 재생 시간 (초)
       * @example 120
       */
      playedTime: number;
    };
    /** @description 비디오 진행 상황 응답 */
    VideoProgressResponse: {
      /**
       * Format: int64
       * @description 진행 상황 ID
       * @example 1
       */
      id?: number;
      /**
       * Format: int64
       * @description 학생 ID
       * @example 1
       */
      studentId?: number;
      /**
       * @description 학생 이름
       * @example 김학생
       */
      studentName?: string;
      /**
       * Format: int64
       * @description 비디오 ID
       * @example 1
       */
      videoId?: number;
      /**
       * @description 비디오 이름
       * @example 1강 - Java 소개
       */
      videoName?: string;
      /**
       * Format: int64
       * @description 강의 ID
       * @example 1
       */
      lectureId?: number;
      /**
       * @description 강의 이름
       * @example Java 프로그래밍 기초
       */
      lectureName?: string;
      /**
       * @description 챕터 이름
       * @example 1장 - Java 기초
       */
      chapterName?: string;
      /**
       * Format: int64
       * @description 재생 시간 (초)
       * @example 120
       */
      playedTime?: number;
      /**
       * Format: date-time
       * @description 마지막 시청일시
       * @example 2023-12-01T10:00:00
       */
      lastWatchedAt?: string;
    };
    /** @description 학생 정보 수정 요청 */
    StudentUpdateRequest: {
      /**
       * @description 이름
       * @example 김학생
       */
      name?: string;
      /**
       * Format: int32
       * @description 나이
       * @example 22
       */
      age?: number;
      /**
       * @description 성별
       * @example MALE
       * @enum {string}
       */
      gender?: "MALE" | "FEMALE";
    };
    StudentInfoResponse: {
      /** Format: int64 */
      id?: number;
      name?: string;
      email?: string;
      /** Format: int32 */
      age?: number;
      /** @enum {string} */
      gender?: "MALE" | "FEMALE";
    };
    /** @description 리뷰 수정 요청 */
    ReviewUpdateRequest: {
      /**
       * @description 리뷰 내용
       * @example 정말 좋은 강의였습니다!
       */
      content: string;
      /**
       * Format: double
       * @description 평점 (1.0 ~ 5.0)
       * @example 4.5
       */
      rating: number;
    };
    /** @description 리뷰 응답 */
    ReviewResponse: {
      /**
       * Format: int64
       * @description 리뷰 ID
       * @example 1
       */
      id?: number;
      /**
       * @description 리뷰 내용
       * @example 정말 좋은 강의였습니다!
       */
      content?: string;
      /**
       * Format: double
       * @description 평점
       * @example 4.5
       */
      rating?: number;
      /**
       * Format: int64
       * @description 강의 ID
       * @example 1
       */
      lectureId?: number;
      /**
       * @description 강의 제목
       * @example Java 기초 강의
       */
      lectureTitle?: string;
      /**
       * Format: int64
       * @description 학생 ID
       * @example 1
       */
      studentId?: number;
      /**
       * @description 학생 이름
       * @example 홍길동
       */
      studentName?: string;
      /**
       * Format: date-time
       * @description 생성일시
       * @example 2024-01-01T10:00:00
       */
      createdDt?: string;
      /**
       * Format: date-time
       * @description 수정일시
       * @example 2024-01-01T10:00:00
       */
      updatedDt?: string;
    };
    /** @description 강의 QnA 등록 요청 */
    LectureQnaRequest: {
      /**
       * Format: int64
       * @description 강의 ID
       * @example 1
       */
      lectureId: number;
      /**
       * @description 질문 내용
       * @example 자바의 다형성에 대해 자세히 설명해주세요.
       */
      question: string;
    };
    /** @description 강의 QnA 응답 */
    LectureQnaResponse: {
      /**
       * Format: int64
       * @description QnA ID
       * @example 1
       */
      id?: number;
      /**
       * Format: int64
       * @description 학생 ID
       * @example 1
       */
      studentId?: number;
      /**
       * @description 학생 이름
       * @example 김학생
       */
      studentName?: string;
      /**
       * Format: int64
       * @description 강의 ID
       * @example 1
       */
      lectureId?: number;
      /**
       * @description 강의 이름
       * @example Java 프로그래밍 기초
       */
      lectureName?: string;
      /**
       * @description 질문 내용
       * @example 자바의 다형성에 대해 자세히 설명해주세요.
       */
      question?: string;
      /**
       * @description 답변 내용
       * @example 다형성은 하나의 객체가...
       */
      answer?: string;
      /**
       * @description 답변 여부
       * @example true
       */
      isAnswered?: boolean;
      /**
       * Format: date-time
       * @description 질문 생성일시
       * @example 2023-12-01T10:00:00
       */
      questionCreatedAt?: string;
      /**
       * Format: date-time
       * @description 마지막 수정일시
       * @example 2023-12-01T11:00:00
       */
      lastModifiedAt?: string;
    };
    /** @description 강의 QnA 답변 요청 */
    LectureQnaAnswerRequest: {
      /**
       * @description 답변 내용
       * @example 다형성은 하나의 객체가 여러 타입으로 표현될 수 있는 능력입니다...
       */
      answer: string;
    };
    /** @description 수정할 강의 정보 */
    LectureUpdateRequest: {
      /**
       * Format: int64
       * @description 하위 카테고리 ID
       * @example 1
       */
      subCategoryId: number;
      /**
       * @description 난이도
       * @example BEGINNER
       * @enum {string}
       */
      level: "BEGINNER" | "NOVICE" | "INTERMEDIATE" | "ADVANCED" | "EXPERT";
      /**
       * Format: date
       * @description 강의 시작일
       * @example 2024-08-01
       */
      startDate: string;
      /**
       * Format: date
       * @description 강의 종료일
       * @example 2024-10-31
       */
      endDate: string;
      /**
       * Format: int32
       * @description 최대 수강 인원
       * @example 30
       */
      maxStudent: number;
      /**
       * @description 강의 소개
       * @example 골프 스윙의 기본부터 응용까지 체계적으로 배워보세요.
       */
      instruction: string;
      /**
       * @description 강의 상세 설명
       * @example 본 강의는 초보자를 위한 맞춤형 커리큘럼으로 구성되어 있습니다.
       */
      description: string;
    };
    /** @description 강의 상세 정보 응답 DTO */
    LectureResponse: {
      /**
       * Format: int64
       * @description 강의 ID
       * @example 1
       */
      id?: number;
      /**
       * @description 강의명
       * @example 왕초보 골프 스윙 마스터 클래스
       */
      name?: string;
      /**
       * Format: int32
       * @description 기수
       * @example 1
       */
      cohort?: number;
      /**
       * @description 난이도
       * @example BEGINNER
       * @enum {string}
       */
      level?: "BEGINNER" | "NOVICE" | "INTERMEDIATE" | "ADVANCED" | "EXPERT";
      /**
       * Format: date
       * @description 강의 시작일
       * @example 2024-08-01
       */
      startDate?: string;
      /**
       * Format: date
       * @description 강의 종료일
       * @example 2024-10-31
       */
      endDate?: string;
      /**
       * Format: int32
       * @description 최대 수강 인원
       * @example 30
       */
      maxStudent?: number;
      /**
       * Format: int32
       * @description 수강료
       * @example 150000
       */
      fee?: number;
      /**
       * @description 강의 소개
       * @example 골프 스윙의 기본부터 응용까지 체계적으로 배워보세요.
       */
      instruction?: string;
      /**
       * @description 강의 상세 설명
       * @example 본 강의는 초보자를 위한 맞춤형 커리큘럼으로 구성되어 있습니다.
       */
      description?: string;
      /**
       * @description 강의 이미지 URL or Key
       * @example https://aws.com/lectures/images/lecture1.jpg?signedKey=123
       */
      imageURL?: string;
    };
    /** @description 수정할 위젯 설정 정보 */
    WidgetSettingUpdateRequest: {
      /** @description 위젯 설정 맵 (Key: WidgetSettingId, Value: 위젯 스펙) */
      widgetSpecs: components["schemas"]["WidgetSpec"][];
    };
    /** @description 위젯 스펙 DTO */
    WidgetSpec: {
      /**
       * @description 위젯 타입
       * @example QNA
       * @enum {string}
       */
      type:
        | "QNA"
        | "SUBMISSION"
        | "TEACHER_INFO"
        | "REVIEW"
        | "NEXT_LECTURE"
        | "STUDENTS_STATUS";
      /**
       * Format: int32
       * @description 행 위치
       * @example 1
       */
      row: number;
      /**
       * Format: int32
       * @description 열 위치
       * @example 1
       */
      col: number;
      /**
       * @description 위젯 크기
       * @example SMALL
       * @enum {string}
       */
      widgetSize: "SMALL" | "LARGE";
      /**
       * @description 표시 여부
       * @example true
       */
      visible: boolean;
    };
    /** @description 위젯 설정 정보 응답 DTO */
    WidgetSettingResponse: {
      /**
       * Format: int64
       * @description 위젯 설정 ID
       * @example 1
       */
      id?: number;
      /**
       * @description 위젯 타입
       * @example SUBMISSION
       * @enum {string}
       */
      widgetType?:
        | "QNA"
        | "SUBMISSION"
        | "TEACHER_INFO"
        | "REVIEW"
        | "NEXT_LECTURE"
        | "STUDENTS_STATUS";
      /**
       * Format: int32
       * @description 행 위치
       * @example 1
       */
      rowPosition?: number;
      /**
       * Format: int32
       * @description 열 위치
       * @example 1
       */
      colPosition?: number;
      /**
       * @description 위젯 크기
       * @example SMALL
       * @enum {string}
       */
      widgetSize?: "SMALL" | "LARGE";
      /**
       * @description 표시 여부
       * @example true
       */
      visible?: boolean;
      /**
       * Format: int64
       * @description 강의 ID
       * @example 1
       */
      lectureId?: number;
    };
    AssignmentResponse: {
      /** Format: int64 */
      id?: number;
      title?: string;
      content?: string;
      fileLink?: string;
      /** Format: date */
      dueDate?: string;
      /** Format: int64 */
      lectureId?: number;
    };
    /** @description 과제 제출 응답 */
    AssignmentSubmissionResponse: {
      /**
       * Format: int64
       * @description 제출 ID
       * @example 1
       */
      id?: number;
      /**
       * Format: int64
       * @description 학생 ID
       * @example 1
       */
      studentId?: number;
      /**
       * @description 학생 이름
       * @example 김학생
       */
      studentName?: string;
      /**
       * Format: int64
       * @description 과제 ID
       * @example 1
       */
      assignmentId?: number;
      /**
       * @description 과제 이름
       * @example Java 기초 과제
       */
      assignmentName?: string;
      /**
       * Format: int64
       * @description 강의 ID
       * @example 1
       */
      lectureId?: number;
      /**
       * @description 강의 이름
       * @example Java 프로그래밍 기초
       */
      lectureName?: string;
      /**
       * @description 파일 다운로드 URL
       * @example https://s3.amazonaws.com/bucket/assignments/file.pdf
       */
      fileUrl?: string;
      /**
       * @description 과제 내용
       * @example 과제 설명입니다.
       */
      content?: string;
      /**
       * Format: date-time
       * @description 제출일시
       * @example 2023-12-01T10:00:00
       */
      submittedAt?: string;
    };
    /** @description 피드백 업데이트 요청 */
    FeedbackUpdateRequest: {
      /**
       * @description 피드백 내용
       * @example 잘 작성된 과제입니다. 다음에는 더 자세한 설명을 추가해보세요.
       */
      feedback: string;
    };
    /** @description 리뷰 작성 요청 */
    ReviewCreateRequest: {
      /**
       * Format: int64
       * @description 강의 ID
       * @example 1
       */
      lectureId: number;
      /**
       * @description 리뷰 내용
       * @example 정말 좋은 강의였습니다!
       */
      content: string;
      /**
       * Format: double
       * @description 평점 (1.0 ~ 5.0)
       * @example 4.5
       */
      rating: number;
    };
    /** @description 강좌 생성에 필요한 정보 */
    LectureCreateRequest: {
      /**
       * Format: int64
       * @description 하위 카테고리 ID
       * @example 1
       */
      subCategoryId: number;
      /**
       * @description 난이도
       * @example BEGINNER
       * @enum {string}
       */
      level: "BEGINNER" | "NOVICE" | "INTERMEDIATE" | "ADVANCED" | "EXPERT";
      /**
       * Format: date
       * @description 강의 시작일
       * @example 2024-08-01
       */
      startDate: string;
      /**
       * Format: date
       * @description 강의 종료일
       * @example 2024-10-31
       */
      endDate: string;
      /**
       * Format: int32
       * @description 최대 수강 인원
       * @example 30
       */
      maxStudent: number;
      /**
       * Format: int32
       * @description 수강료
       * @example 150000
       */
      fee: number;
      /**
       * @description 강의명
       * @example 왕초보 골프 스윙 마스터 클래스
       */
      name: string;
      /**
       * @description 강의 소개
       * @example 골프 스윙의 기본부터 응용까지 체계적으로 배워보세요.
       */
      instruction: string;
      /**
       * @description 강의 상세 설명
       * @example 본 강의는 초보자를 위한 맞춤형 커리큘럼으로 구성되어 있습니다.
       */
      description: string;
      /** @description 강의 시간표 목록 */
      uploadTimeList: components["schemas"]["UploadTimeCreateRequest"][];
    };
    UploadTimeCreateRequest: {
      /**
       * @description 매주 강좌가 올라오는 요일입니다.
       * @example MONDAY
       * @enum {string}
       */
      dayOfWeek:
        | "MONDAY"
        | "TUESDAY"
        | "WEDNESDAY"
        | "THURSDAY"
        | "FRIDAY"
        | "SATURDAY"
        | "SUNDAY";
      /**
       * @description 해당 요일에 강좌가 올라오는 시간입니다. HH:mm:ss 형식
       * @example 14:00:00
       */
      scheduledAt: string;
    };
    /** @description 동영상 업로드 요청 정보 */
    VideoUploadRequest: {
      /**
       * @description 동영상 제목
       * @example React 기초 강의 1편
       */
      title: string;
      /**
       * Format: int64
       * @description 동영상 길이 (초 단위)
       * @example 1800
       */
      duration: number;
    };
    /** @description 동영상 업로드 응답 */
    VideoUploadResponse: {
      /**
       * Format: int64
       * @description 생성된 비디오 ID
       * @example 1
       */
      videoId?: number;
      /** @description S3 업로드용 Presigned URL */
      uploadPresignedUrl?: string;
      /**
       * @description S3 저장 경로
       * @example lectures/1/chapters/1/video/1/full
       */
      s3Key?: string;
    };
    /** @description 관심 카테고리 추가 요청 */
    InterestingCategoryRequest: {
      /**
       * Format: int64
       * @description 서브 카테고리 ID
       * @example 1
       */
      subCategoryId: number;
    };
    /** @description 관심 카테고리 응답 */
    InterestingCategoryResponse: {
      /**
       * Format: int64
       * @description 관심 카테고리 ID
       * @example 1
       */
      id?: number;
      /**
       * Format: int64
       * @description 서브 카테고리 ID
       * @example 1
       */
      subCategoryId?: number;
      /**
       * @description 서브 카테고리명
       * @example Java
       */
      subCategoryName?: string;
      /**
       * Format: int64
       * @description 메인 카테고리 ID
       * @example 1
       */
      mainCategoryId?: number;
      /**
       * @description 메인 카테고리명
       * @example 프로그래밍
       */
      mainCategoryName?: string;
    };
    /** @description 강의 수강 등록 요청 */
    LectureEnrollmentRequest: {
      /**
       * Format: int64
       * @description 강의 ID
       * @example 1
       */
      lectureId: number;
    };
    /** @description 강의 수강 등록 응답 */
    LectureEnrollmentResponse: {
      /**
       * Format: int64
       * @description 수강 등록 ID
       * @example 1
       */
      id?: number;
      /**
       * Format: int64
       * @description 학생 ID
       * @example 1
       */
      studentId?: number;
      /**
       * @description 학생 이름
       * @example 김학생
       */
      studentName?: string;
      /**
       * Format: int64
       * @description 강의 ID
       * @example 1
       */
      lectureId?: number;
      /**
       * @description 강의명
       * @example Java 기초 강의
       */
      lectureName?: string;
      /**
       * @description 카테고리명
       * @example 프로그래밍
       */
      categoryName?: string;
      /**
       * @description 강의 레벨
       * @example BEGINNER
       */
      level?: string;
      /**
       * Format: date
       * @description 강의 시작일
       */
      startDate?: string;
      /**
       * Format: date
       * @description 강의 종료일
       */
      endDate?: string;
      /**
       * Format: int32
       * @description 강의 가격
       * @example 50000
       */
      fee?: number;
      /**
       * Format: date-time
       * @description 수강 등록일시
       */
      enrolledAt?: string;
    };
    /** @description 챕터 생성 요청 DTO */
    ChapterCreateRequest: {
      /**
       * Format: int64
       * @description 강의 ID
       * @example 1
       */
      lectureId: number;
      /**
       * @description 챕터명
       * @example 1주차: 스윙 기본
       */
      name: string;
    };
    /** @description 챕터 정보 응답 DTO */
    ChapterResponse: {
      /**
       * Format: int64
       * @description 챕터 ID
       * @example 1
       */
      id?: number;
      /**
       * @description 챕터명
       * @example 1주차: 스윙 기본
       */
      name?: string;
      /**
       * Format: int64
       * @description 강의 ID
       * @example 1
       */
      lectureId?: number;
    };
    /** @description 강의 북마크 추가 요청 */
    LectureBookmarkRequest: {
      /**
       * Format: int64
       * @description 강의 ID
       * @example 1
       */
      lectureId: number;
    };
    /** @description 강의 북마크 응답 */
    LectureBookmarkResponse: {
      /**
       * Format: int64
       * @description 북마크 ID
       * @example 1
       */
      id?: number;
      /**
       * Format: int64
       * @description 학생 ID
       * @example 1
       */
      studentId?: number;
      /**
       * Format: int64
       * @description 강의 ID
       * @example 1
       */
      lectureId?: number;
      /**
       * @description 강의명
       * @example Java 기초 강의
       */
      lectureName?: string;
      /**
       * @description 카테고리명
       * @example 프로그래밍
       */
      categoryName?: string;
      /**
       * @description 강의 레벨
       * @example BEGINNER
       */
      level?: string;
      /**
       * Format: int32
       * @description 강의 가격
       * @example 50000
       */
      fee?: number;
      /**
       * Format: date-time
       * @description 북마크 추가일시
       */
      createdDt?: string;
    };
    /** @description 강사 이력 */
    CareerRegisterRequest: {
      /**
       * @description 이력
       * @example 생활체육지도자 1급
       */
      name: string;
      /**
       * @description 이력 종류, [ EXPERIENCE : 일반 경력, CERTIFICATE : 자격증 ]
       * @example EXPERIENCE
       * @enum {string}
       */
      type: "EXPERIENCE" | "CERTIFICATE";
    };
    /** @description 강사 회원가입에 필요한 정보 */
    TeacherRegisterRequest: {
      /**
       * @description 이름
       * @example 홍길동
       */
      name: string;
      /**
       * @description 이메일
       * @example student@example.com
       */
      email: string;
      /**
       * Format: int32
       * @description 나이
       * @example 20
       */
      age: number;
      /**
       * @description 성별
       * @example MALE
       * @enum {string}
       */
      gender: "MALE" | "FEMALE";
      /**
       * @description 비밀번호
       * @example password123!
       */
      password: string;
      /**
       * @description 비밀번호 확인
       * @example password123!
       */
      passwordConfirm: string;
      /**
       * @description 강사 소개
       * @example 같이 골프 배워보아요!
       */
      instruction: string;
      /** @description 강사 이력 */
      careerList?: components["schemas"]["CareerRegisterRequest"][];
      passwordMatching?: boolean;
    };
    /** @description 회원가입 응답 */
    RegisterResponse: {
      /**
       * @description 사용자 ID
       * @example 2024001
       */
      userId?: string;
      /**
       * @description 이름
       * @example 홍길동
       */
      name?: string;
      /**
       * @description 이메일
       * @example student@example.com
       */
      email?: string;
      /**
       * @description 사용자 역할
       * @example STUDENT
       */
      role?: string;
      /**
       * @description 회원가입 성공 메시지
       * @example 회원가입이 완료되었습니다
       */
      message?: string;
    };
    /** @description 수강생 회원가입에 필요한 정보 */
    StudentRegisterRequest: {
      /**
       * @description 이름
       * @example 홍길동
       */
      name: string;
      /**
       * @description 이메일
       * @example student@example.com
       */
      email: string;
      /**
       * Format: int32
       * @description 나이
       * @example 20
       */
      age: number;
      /**
       * @description 성별
       * @example MALE
       * @enum {string}
       */
      gender: "MALE" | "FEMALE";
      /**
       * @description 비밀번호
       * @example password123!
       */
      password: string;
      /**
       * @description 비밀번호 확인
       * @example password123!
       */
      passwordConfirm: string;
      passwordMatching?: boolean;
    };
    /** @description 토큰 응답 */
    TokenResponse: {
      /**
       * @description 액세스 토큰
       * @example eyJhbGciOiJIUzUxMiJ9...
       */
      accessToken: string;
      /**
       * @description 토큰 타입
       * @example Bearer
       */
      tokenType?: string;
      /**
       * Format: int64
       * @description 토큰 만료 시간 (초)
       * @example 3600
       */
      expiresIn?: number;
    };
    /** @description 로그인 요청 */
    LoginRequest: {
      /**
       * @description 사용자 이메일
       * @example student@example.com
       */
      email: string;
      /**
       * @description 비밀번호
       * @example password123
       */
      password: string;
    };
    /** @description 로그인 응답 */
    LoginResponse: {
      /**
       * @description 액세스 토큰
       * @example eyJhbGciOiJIUzUxMiJ9...
       */
      accessToken: string;
      /**
       * @description 사용자 역할
       * @example STUDENT
       * @enum {string}
       */
      role?: "STUDENT" | "TEACHER" | "ADMIN";
    };
    /** @description 챕터 수정 요청 DTO */
    ChapterUpdateRequest: {
      /**
       * @description 챕터명
       * @example 1주차: 스윙 기본 자세
       */
      name: string;
    };
    Pageable: {
      /** Format: int32 */
      page?: number;
      /** Format: int32 */
      size?: number;
      sort?: string[];
    };
    PageVideoProgressResponse: {
      /** Format: int64 */
      totalElements?: number;
      /** Format: int32 */
      totalPages?: number;
      /** Format: int32 */
      size?: number;
      content?: components["schemas"]["VideoProgressResponse"][];
      /** Format: int32 */
      number?: number;
      sort?: components["schemas"]["SortObject"];
      /** Format: int32 */
      numberOfElements?: number;
      pageable?: components["schemas"]["PageableObject"];
      first?: boolean;
      last?: boolean;
      empty?: boolean;
    };
    PageableObject: {
      /** Format: int64 */
      offset?: number;
      sort?: components["schemas"]["SortObject"];
      /** Format: int32 */
      pageSize?: number;
      paged?: boolean;
      /** Format: int32 */
      pageNumber?: number;
      unpaged?: boolean;
    };
    SortObject: {
      empty?: boolean;
      sorted?: boolean;
      unsorted?: boolean;
    };
    PageReviewResponse: {
      /** Format: int64 */
      totalElements?: number;
      /** Format: int32 */
      totalPages?: number;
      /** Format: int32 */
      size?: number;
      content?: components["schemas"]["ReviewResponse"][];
      /** Format: int32 */
      number?: number;
      sort?: components["schemas"]["SortObject"];
      /** Format: int32 */
      numberOfElements?: number;
      pageable?: components["schemas"]["PageableObject"];
      first?: boolean;
      last?: boolean;
      empty?: boolean;
    };
    PageLectureQnaResponse: {
      /** Format: int64 */
      totalElements?: number;
      /** Format: int32 */
      totalPages?: number;
      /** Format: int32 */
      size?: number;
      content?: components["schemas"]["LectureQnaResponse"][];
      /** Format: int32 */
      number?: number;
      sort?: components["schemas"]["SortObject"];
      /** Format: int32 */
      numberOfElements?: number;
      pageable?: components["schemas"]["PageableObject"];
      first?: boolean;
      last?: boolean;
      empty?: boolean;
    };
    /** @description 연령대별 수강생 통계 */
    AgeGroupStatistics: {
      /**
       * @description 연령대 (50대 이상 5살 단위)
       * @example 50-54
       */
      ageGroup?: string;
      /**
       * Format: int32
       * @description 남성 수강생 수
       */
      maleCount?: number;
      /**
       * Format: int32
       * @description 여성 수강생 수
       */
      femaleCount?: number;
    };
    /** @description 과제별 제출률 */
    AssignmentSubmissionRate: {
      /**
       * Format: int64
       * @description 과제 ID
       */
      assignmentId?: number;
      /** @description 과제 이름 */
      assignmentName?: string;
      /**
       * Format: double
       * @description 제출률 (0.0 ~ 1.0)
       */
      submissionRate?: number;
      /**
       * Format: int32
       * @description 제출한 학생 수
       */
      submittedCount?: number;
      /**
       * Format: int32
       * @description 전체 수강생 수
       */
      totalStudentCount?: number;
    };
    /** @description 과제 제출률 통계 */
    AssignmentSubmissionStatistics: {
      /** @description 최근 5개 과제 제출률 목록 */
      recentAssignments?: components["schemas"]["AssignmentSubmissionRate"][];
    };
    /** @description 강좌 수강생 통계 응답 */
    LectureStatisticsResponse: {
      /** @description 비디오 수강 통계 */
      videoStatistics?: components["schemas"]["VideoStatistics"];
      /** @description 과제 제출률 통계 */
      assignmentStatistics?: components["schemas"]["AssignmentSubmissionStatistics"];
      /** @description 연령대별 수강생 통계 */
      ageGroupStatistics?: components["schemas"]["AgeGroupStatistics"][];
    };
    /** @description 비디오 수강 통계 */
    VideoStatistics: {
      /**
       * Format: double
       * @description 평균 시청 비디오 수
       */
      averageWatchedVideos?: number;
      /**
       * Format: int32
       * @description 모든 비디오를 완주한 학생 수
       */
      completedStudentsCount?: number;
    };
    ReviewItem: {
      /** Format: int64 */
      reviewId?: number;
      content?: string;
      /** Format: double */
      rating?: number;
      studentName?: string;
      lectureName?: string;
      /** Format: double */
      studentReviewRatio?: number;
    };
    ReviewWidgetResponse: {
      topReviews?: components["schemas"]["ReviewItem"][];
    };
    QnaItem: {
      /** Format: int64 */
      qnaId?: number;
      question?: string;
      answer?: string;
      studentName?: string;
      lectureName?: string;
      /** Format: date-time */
      createdAt?: string;
      isMyQuestion?: boolean;
    };
    QnaWidgetResponse: {
      recentQuestions?: components["schemas"]["QnaItem"][];
      myQuestions?: components["schemas"]["QnaItem"][];
    };
    AssignmentWidgetResponse: {
      /** Format: int64 */
      upcomingAssignmentId?: number;
      upcomingAssignmentName?: string;
      upcomingAssignmentInstruction?: string;
      /** Format: date-time */
      upcomingDueDateTime?: string;
      /** Format: int64 */
      recentSubmissionId?: number;
      recentSubmissionAssignmentName?: string;
      recentSubmissionContent?: string;
      recentSubmissionFileUrl?: string;
      feedback?: string;
      /** Format: date-time */
      recentSubmissionDateTime?: string;
    };
    /** @description 내 강의 현황 위젯 응답 */
    MyLectureStatusWidgetResponse: {
      /**
       * Format: int32
       * @description 강의 진행률
       * @example 50
       */
      lectureProgressRate?: number;
      /**
       * Format: int32
       * @description 강좌의 총 동영상 재생시간
       * @example 121
       */
      totalVideoDurationHour?: number;
      /**
       * Format: int32
       * @description 총 동영상 개수
       * @example 10
       */
      lectureVideoCount?: number;
      /**
       * Format: date-time
       * @description 가장 가까운 과제 마감일
       * @example 2025-08-20T23:59:59
       */
      assignmentDueDateTime?: string;
      /**
       * @description 과제 이름
       * @example 1주차 과제
       */
      assignmentName?: string;
      /**
       * @description 과제 제출 여부
       * @example true
       */
      isAssignmentSubmitted?: boolean;
    };
    LectureInfoWidgetResponse: {
      /** Format: int64 */
      lectureId?: number;
      /** Format: int32 */
      cohort?: number;
      uploadTimesList?: components["schemas"]["UploadTimeResponse"][];
      /** Format: date */
      start?: string;
      /** Format: date */
      endDate?: string;
      /** @enum {string} */
      level?: "BEGINNER" | "NOVICE" | "INTERMEDIATE" | "ADVANCED" | "EXPERT";
      /** Format: int32 */
      fee?: number;
    };
    UploadTimeResponse: {
      /**
       * @description 요일
       * @example 월
       */
      dayOfWeek?: string;
      /**
       * @description 시간
       * @example HH:mm
       */
      scheduledAt?: string;
    };
    LectureBannerResponse: {
      /**
       * Format: int64
       * @description 강좌 id
       * @example 1
       */
      lectureId?: number;
      /**
       * @description 강좌 이미지 URL
       * @example www.aws.com/s3/image/1
       */
      presignedImageURL?: string;
      /**
       * @description 강좌명
       * @example 골프 왕초보 강좌
       */
      name?: string;
      /**
       * Format: int32
       * @description 기수
       * @example 1
       */
      cohort?: number;
      /**
       * Format: int32
       * @description 찜 개수
       * @example 53
       */
      bookMarkCount?: number;
      /**
       * Format: int32
       * @description 최대 수강 인원
       * @example 30
       */
      maxStudentCount?: number;
      /**
       * Format: int32
       * @description 현재 수강 인원
       * @example 17
       */
      enrolledStudentCount?: number;
      /**
       * @description 메인 카테고리
       * @example 운동
       */
      mainCategoryName?: string;
      /**
       * @description 보조 카테고리
       * @example 골프
       */
      subCategoryName?: string;
      /**
       * Format: int32
       * @description 강좌 수강 기간 (개월)
       * @example 2
       */
      lectureDuration?: number;
    };
    PageLectureEnrollmentResponse: {
      /** Format: int64 */
      totalElements?: number;
      /** Format: int32 */
      totalPages?: number;
      /** Format: int32 */
      size?: number;
      content?: components["schemas"]["LectureEnrollmentResponse"][];
      /** Format: int32 */
      number?: number;
      sort?: components["schemas"]["SortObject"];
      /** Format: int32 */
      numberOfElements?: number;
      pageable?: components["schemas"]["PageableObject"];
      first?: boolean;
      last?: boolean;
      empty?: boolean;
    };
    PageLectureBookmarkResponse: {
      /** Format: int64 */
      totalElements?: number;
      /** Format: int32 */
      totalPages?: number;
      /** Format: int32 */
      size?: number;
      content?: components["schemas"]["LectureBookmarkResponse"][];
      /** Format: int32 */
      number?: number;
      sort?: components["schemas"]["SortObject"];
      /** Format: int32 */
      numberOfElements?: number;
      pageable?: components["schemas"]["PageableObject"];
      first?: boolean;
      last?: boolean;
      empty?: boolean;
    };
    PageAssignmentSubmissionResponse: {
      /** Format: int64 */
      totalElements?: number;
      /** Format: int32 */
      totalPages?: number;
      /** Format: int32 */
      size?: number;
      content?: components["schemas"]["AssignmentSubmissionResponse"][];
      /** Format: int32 */
      number?: number;
      sort?: components["schemas"]["SortObject"];
      /** Format: int32 */
      numberOfElements?: number;
      pageable?: components["schemas"]["PageableObject"];
      first?: boolean;
      last?: boolean;
      empty?: boolean;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  getCurrentStudentProgress: {
    parameters: {
      query: {
        pageable: components["schemas"]["Pageable"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["PageVideoProgressResponse"];
        };
      };
    };
  };
  updateProgress: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VideoProgressRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["VideoProgressResponse"];
        };
      };
    };
  };
  getMyInfo: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["StudentInfoResponse"];
        };
      };
    };
  };
  updateMyInfo: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["StudentUpdateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["StudentInfoResponse"];
        };
      };
    };
  };
  getReview: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 조회할 리뷰 ID */
        reviewId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["ReviewResponse"];
        };
      };
    };
  };
  updateReview: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 수정할 리뷰 ID */
        reviewId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReviewUpdateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["ReviewResponse"];
        };
      };
    };
  };
  deleteReview: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 삭제할 리뷰 ID */
        reviewId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getQuestion: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description QnA ID */
        qnaId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["LectureQnaResponse"];
        };
      };
    };
  };
  updateQuestion: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description QnA ID */
        qnaId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LectureQnaRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["LectureQnaResponse"];
        };
      };
    };
  };
  deleteQuestion: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description QnA ID */
        qnaId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  answerQuestion: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description QnA ID */
        qnaId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LectureQnaAnswerRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["LectureQnaResponse"];
        };
      };
    };
  };
  getLecture: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description 조회할 강의 ID
         * @example 1
         */
        lectureId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 강의 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["LectureResponse"];
        };
      };
      /** @description 인증 실패 - 토큰이 유효하지 않음 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["LectureResponse"];
        };
      };
      /** @description 권한 없음 - TEACHER 또는 STUDENT 권한 필요 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["LectureResponse"];
        };
      };
      /** @description 강의를 찾을 수 없음 (LECTURE_NOT_FOUND) */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["LectureResponse"];
        };
      };
      /** @description 서버 내부 오류 */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["LectureResponse"];
        };
      };
    };
  };
  updateLecture: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 수정할 강의 ID */
        lectureId: number;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          request: components["schemas"]["LectureUpdateRequest"];
          /**
           * Format: binary
           * @description 이미지 파일
           */
          file?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["LectureResponse"];
        };
      };
    };
  };
  deleteLecture: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 삭제할 강의 ID */
        lectureId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  updateWidgetSettings: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 수정할 강의 ID */
        lectureId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WidgetSettingUpdateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["WidgetSettingResponse"][];
        };
      };
    };
  };
  getAssignment: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 조회할 과제 ID */
        assignmentId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["AssignmentResponse"];
        };
      };
    };
  };
  updateAssignment: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 수정할 과제 ID */
        assignmentId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["AssignmentResponse"];
        };
      };
    };
  };
  deleteAssignment: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 삭제할 과제 ID */
        assignmentId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  updateSubmission: {
    parameters: {
      query?: {
        /** @description 과제 설명 */
        content?: string;
      };
      header?: never;
      path: {
        /** @description 제출 ID */
        submissionId: number;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "multipart/form-data": string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["AssignmentSubmissionResponse"];
        };
      };
    };
  };
  deleteSubmission: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 제출 ID */
        submissionId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  updateFeedback: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 제출 ID */
        submissionId: number;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["FeedbackUpdateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["AssignmentSubmissionResponse"];
        };
      };
    };
  };
  createReview: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReviewCreateRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["ReviewResponse"];
        };
      };
    };
  };
  createQuestion: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LectureQnaRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["LectureQnaResponse"];
        };
      };
    };
  };
  createLecture: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          request: components["schemas"]["LectureCreateRequest"];
          /**
           * Format: binary
           * @description 이미지 파일
           */
          file: string;
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["LectureResponse"];
        };
      };
    };
  };
  uploadVideo: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description 강의 ID
         * @example 1
         */
        lectureId: number;
        /**
         * @description 챕터 ID
         * @example 1
         */
        chapterId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VideoUploadRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["VideoUploadResponse"];
        };
      };
    };
  };
  finalizeVideoUpload: {
    parameters: {
      query?: {
        /** @description HLS 스트리밍 경로 */
        streamingPath?: string;
      };
      header?: never;
      path: {
        /**
         * @description 강의 ID
         * @example 1
         */
        lectureId: number;
        /**
         * @description 챕터 ID
         * @example 1
         */
        chapterId: number;
        /**
         * @description 동영상 ID
         * @example 1
         */
        videoId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getMyInterestingCategories: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["InterestingCategoryResponse"][];
        };
      };
    };
  };
  addInterestingCategory: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InterestingCategoryRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["InterestingCategoryResponse"];
        };
      };
    };
  };
  getMyEnrollments: {
    parameters: {
      query: {
        pageable: components["schemas"]["Pageable"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["PageLectureEnrollmentResponse"];
        };
      };
    };
  };
  enrollLecture: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LectureEnrollmentRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["LectureEnrollmentResponse"];
        };
      };
    };
  };
  createChapter: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChapterCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["ChapterResponse"];
        };
      };
    };
  };
  getMyBookmarks: {
    parameters: {
      query: {
        pageable: components["schemas"]["Pageable"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["PageLectureBookmarkResponse"];
        };
      };
    };
  };
  addBookmark: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LectureBookmarkRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["LectureBookmarkResponse"];
        };
      };
    };
  };
  registerTeacher: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          request: components["schemas"]["TeacherRegisterRequest"];
          /**
           * Format: binary
           * @description 강사 프로필 이미지
           */
          file: string;
        };
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RegisterResponse"];
        };
      };
    };
  };
  registerStudent: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          request: components["schemas"]["StudentRegisterRequest"];
          /**
           * Format: binary
           * @description 수강생 프로필 이미지
           */
          file: string;
        };
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RegisterResponse"];
        };
      };
    };
  };
  refreshToken: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie: {
        refresh_token: string;
      };
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["TokenResponse"];
        };
      };
    };
  };
  logout: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  login: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["LoginResponse"];
        };
      };
    };
  };
  createAssignment: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["AssignmentResponse"];
        };
      };
    };
  };
  getCurrentStudentSubmissions: {
    parameters: {
      query: {
        pageable: components["schemas"]["Pageable"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["PageAssignmentSubmissionResponse"];
        };
      };
    };
  };
  createSubmission: {
    parameters: {
      query: {
        /** @description 과제 ID */
        assignmentId: number;
        /** @description 과제 설명 */
        content?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "multipart/form-data": string;
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["AssignmentSubmissionResponse"];
        };
      };
    };
  };
  getChapter: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 조회할 챕터 ID */
        chapterId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["ChapterResponse"];
        };
      };
    };
  };
  deleteChapter: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 삭제할 챕터 ID */
        chapterId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  updateChapter: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 수정할 챕터 ID */
        chapterId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChapterUpdateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["ChapterResponse"];
        };
      };
    };
  };
  getProgressByVideoForAll: {
    parameters: {
      query: {
        pageable: components["schemas"]["Pageable"];
      };
      header?: never;
      path: {
        /** @description 비디오 ID */
        videoId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["PageVideoProgressResponse"];
        };
      };
    };
  };
  getProgressByVideo: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 비디오 ID */
        videoId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["VideoProgressResponse"];
        };
      };
    };
  };
  getCurrentStudentProgressByLecture: {
    parameters: {
      query: {
        pageable: components["schemas"]["Pageable"];
      };
      header?: never;
      path: {
        /** @description 강의 ID */
        lectureId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["PageVideoProgressResponse"];
        };
      };
    };
  };
  getReviewsByLecture: {
    parameters: {
      query: {
        pageable: components["schemas"]["Pageable"];
      };
      header?: never;
      path: {
        /** @description 강의 ID */
        lectureId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["PageReviewResponse"];
        };
      };
    };
  };
  getMyReviewByLecture: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 강의 ID */
        lectureId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["ReviewResponse"];
        };
      };
    };
  };
  getCurrentStudentQuestions: {
    parameters: {
      query: {
        pageable: components["schemas"]["Pageable"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["PageLectureQnaResponse"];
        };
      };
    };
  };
  getCurrentStudentQuestionCount: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": {
            [key: string]: number;
          };
        };
      };
    };
  };
  getQuestionsByLecture: {
    parameters: {
      query: {
        pageable: components["schemas"]["Pageable"];
      };
      header?: never;
      path: {
        /** @description 강의 ID */
        lectureId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["PageLectureQnaResponse"];
        };
      };
    };
  };
  getLectureStatistics: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 강좌 ID */
        lectureId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["LectureStatisticsResponse"];
        };
      };
    };
  };
  getReviewWidget: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 강의 ID */
        lectureId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["ReviewWidgetResponse"];
        };
      };
    };
  };
  getQnaWidget: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 강의 ID */
        lectureId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["QnaWidgetResponse"];
        };
      };
    };
  };
  getAssignmentWidget: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 강의 ID */
        lectureId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["AssignmentWidgetResponse"];
        };
      };
    };
  };
  getMyLectureStatusWidget: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 조회할 강좌 ID */
        lectureId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["MyLectureStatusWidgetResponse"];
        };
      };
    };
  };
  getLectureInfoWidget: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 조회할 강좌 ID */
        lectureId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["LectureInfoWidgetResponse"];
        };
      };
    };
  };
  getLectureBanner: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 조회할 강좌 ID */
        lectureId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["LectureBannerResponse"];
        };
      };
    };
  };
  getLectureEnrollments: {
    parameters: {
      query: {
        pageable: components["schemas"]["Pageable"];
      };
      header?: never;
      path: {
        /** @description 강의 ID */
        lectureId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["PageLectureEnrollmentResponse"];
        };
      };
    };
  };
  cancelEnrollmentByLecture: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 강의 ID */
        lectureId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getMyEnrollmentCount: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": {
            [key: string]: number;
          };
        };
      };
    };
  };
  checkEnrollment: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 강의 ID */
        lectureId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": {
            [key: string]: boolean;
          };
        };
      };
    };
  };
  checkBookmark: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 강의 ID */
        lectureId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": {
            [key: string]: boolean;
          };
        };
      };
    };
  };
  validateToken: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getSubmissionsByAssignment: {
    parameters: {
      query: {
        pageable: components["schemas"]["Pageable"];
      };
      header?: never;
      path: {
        /** @description 과제 ID */
        assignmentId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["PageAssignmentSubmissionResponse"];
        };
      };
    };
  };
  getMySubmissionByAssignment: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 과제 ID */
        assignmentId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["AssignmentSubmissionResponse"];
        };
      };
    };
  };
  checkSubmissionStatus: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 과제 ID */
        assignmentId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": {
            [key: string]: boolean;
          };
        };
      };
    };
  };
  getCurrentStudentSubmissionCount: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": {
            [key: string]: number;
          };
        };
      };
    };
  };
  deleteProgress: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 진행 상황 ID */
        progressId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  removeInterestingCategory: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 관심 카테고리 ID */
        interestingCategoryId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  removeInterestingCategoryBySubCategory: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 서브 카테고리 ID */
        subCategoryId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  cancelEnrollment: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 수강 등록 ID */
        enrollmentId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  removeBookmark: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 북마크 ID */
        bookmarkId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  removeBookmarkByLecture: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 강의 ID */
        lectureId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
